// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Passive.Test.DynamicModelTests.Async
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DynamicAsyncModelPagedFeature : Xunit.IUseFixture<DynamicAsyncModelPagedFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Paged.feature"
#line hidden
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DynamicAsyncModel Paged()", "In order to reduce the load on my database\r\nAs a developer\r\nI want to get page re" +
                    "sults", GenerationTargetLanguage.CSharp, new string[] {
                        "async"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public virtual void SetFixture(DynamicAsyncModelPagedFeature.FixtureData fixtureData)
        {
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Color",
                        "Amps"});
            table1.AddRow(new string[] {
                        "1",
                        "Toaster",
                        "Stainless Steel",
                        "7"});
            table1.AddRow(new string[] {
                        "2",
                        "Vacuum",
                        "Red",
                        "12"});
            table1.AddRow(new string[] {
                        "3",
                        "Stove",
                        "White",
                        "30"});
            table1.AddRow(new string[] {
                        "4",
                        "Microwave",
                        "White",
                        "20"});
#line 8
  testRunner.Given("a database with the following appliances", ((string)(null)), table1);
#line hidden
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicAsyncModel Paged()")]
        [Xunit.TraitAttribute("Description", "Getting all records")]
        public virtual void GettingAllRecords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting all records", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
  testRunner.Given("I have a model for Appliance");
#line 18
  testRunner.When("I ask for page 1");
#line 19
  testRunner.And("the page size is 20");
#line 20
  testRunner.Then("I should get all items");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.Extensions.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicAsyncModel Paged()")]
        [Xunit.TraitAttribute("Description", "Getting some records")]
        [Xunit.Extensions.InlineDataAttribute("1", "2", "2", "1,2", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("2", "2", "2", "3,4", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("3", "2", "0", "", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("1", "3", "3", "1,2,3", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("2", "3", "1", "4", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("3", "3", "0", "", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("1", "4", "4", "1,2,3,4", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("2", "4", "0", "", new string[0])]
        public virtual void GettingSomeRecords(string page, string pageSize, string count, string ids, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Getting some records", exampleTags);
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
  testRunner.Given("I have a model for Appliance");
#line 24
  testRunner.When(string.Format("I ask for page {0}", page));
#line 25
  testRunner.And(string.Format("the page size is {0}", pageSize));
#line 26
  testRunner.And("I order rows by Id");
#line 27
  testRunner.Then(string.Format("they should have the ids {0}", ids));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.Extensions.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicAsyncModel Paged()")]
        [Xunit.TraitAttribute("Description", "Filtering records by an object")]
        [Xunit.Extensions.InlineDataAttribute("Stainless Steel", "1", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("Red", "1", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("White", "2", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("Green", "0", new string[0])]
        public virtual void FilteringRecordsByAnObject(string value, string count, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering records by an object", exampleTags);
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
  testRunner.Given("I have a model for Appliance");
#line 42
  testRunner.When("I ask for page 1");
#line 43
  testRunner.And(string.Format("I only want appliances colored {0}", value));
#line 44
  testRunner.Then(string.Format("I should only have {0} results", count));
#line 45
  testRunner.And(string.Format("I should only get {0}-colored appliances", value));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.Extensions.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicAsyncModel Paged()")]
        [Xunit.TraitAttribute("Description", "Filtering records by string")]
        [Xunit.Extensions.InlineDataAttribute("6", "2", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("7", "2", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("10", "2", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("15", "2", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("20", "1", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("30", "0", new string[0])]
        public virtual void FilteringRecordsByString(string value, string count, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filtering records by string", exampleTags);
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
  testRunner.Given("I have a model for Appliance");
#line 56
  testRunner.When("I ask for page 1");
#line 57
  testRunner.And("the page size is 2");
#line 58
  testRunner.And(string.Format("I only want appliances with more than {0} amps", value));
#line 59
  testRunner.Then(string.Format("I should only have {0} results", count));
#line 60
  testRunner.And(string.Format("I should only get appliances with more than {0} amps", value));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.Extensions.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicAsyncModel Paged()")]
        [Xunit.TraitAttribute("Description", "Executing a query with order by")]
        [Xunit.Extensions.InlineDataAttribute("id", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("name", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("AMPS", new string[0])]
        public virtual void ExecutingAQueryWithOrderBy(string orderby, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing a query with order by", exampleTags);
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
  testRunner.Given("I have a model for Appliance");
#line 74
  testRunner.When("I ask for page 1");
#line 75
  testRunner.And(string.Format("I order rows by {0}", orderby));
#line 76
  testRunner.Then(string.Format("the records should be sorted by {0}", orderby));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.Extensions.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicAsyncModel Paged()")]
        [Xunit.TraitAttribute("Description", "Executing a query with descending order by")]
        [Xunit.Extensions.InlineDataAttribute("id", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("name", new string[0])]
        [Xunit.Extensions.InlineDataAttribute("AMPS", new string[0])]
        public virtual void ExecutingAQueryWithDescendingOrderBy(string orderby, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing a query with descending order by", exampleTags);
#line 84
this.ScenarioSetup(scenarioInfo);
#line 85
  testRunner.Given("I have a model for Appliance");
#line 86
  testRunner.When("I ask for page 1");
#line 87
  testRunner.And(string.Format("I order rows by {0} desc", orderby));
#line 88
  testRunner.Then(string.Format("the records should be reverse-sorted by {0}", orderby));
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicAsyncModel Paged()")]
        [Xunit.TraitAttribute("Description", "Selecting a subset of columns")]
        public virtual void SelectingASubsetOfColumns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecting a subset of columns", ((string[])(null)));
#line 96
this.ScenarioSetup(scenarioInfo);
#line 97
  testRunner.Given("I have a model for Appliance");
#line 98
  testRunner.When("I ask for page 1");
#line 99
  testRunner.And("I ask for the columns \"Id, Name\"");
#line 100
  testRunner.Then("the records should only have the columns \"Id, Name\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "DynamicAsyncModel Paged()")]
        [Xunit.TraitAttribute("Description", "Selecting an invalid column")]
        public virtual void SelectingAnInvalidColumn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecting an invalid column", ((string[])(null)));
#line 102
this.ScenarioSetup(scenarioInfo);
#line 103
  testRunner.Given("I have a model for Appliance");
#line 104
  testRunner.When("I ask for page 1");
#line 105
  testRunner.And("I ask for an invalid column");
#line 106
  testRunner.Then("the query should throw an exception");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DynamicAsyncModelPagedFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DynamicAsyncModelPagedFeature.FeatureTearDown();
            }
        }
    }
}
#endregion
