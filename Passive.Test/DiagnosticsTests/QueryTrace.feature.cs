// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Passive.Test.DiagnosticsTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TraceQueriesFeature : Xunit.IUseFixture<TraceQueriesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "QueryTrace.feature"
#line hidden
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Trace queries", "In order to debug my application\r\nAs a developer\r\nI want to be able to see what S" +
                    "QL is being executed", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public virtual void SetFixture(TraceQueriesFeature.FixtureData fixtureData)
        {
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Trace queries")]
        [Xunit.TraitAttribute("Description", "Trace events are called on query")]
        public virtual void TraceEventsAreCalledOnQuery()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trace events are called on query", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
  testRunner.Given("a database");
#line 8
  testRunner.When("I execute the query \"SELECT \'Hello\' as [Greeting], \'World\' as [Subject]\"");
#line 9
  testRunner.Then("I should get a BeginQuery event with the value \"SELECT \'Hello\' as [Greeting], \'Wo" +
                    "rld\' as [Subject]\"");
#line 10
  testRunner.And("I should get an EndQuery event with the value \"SELECT \'Hello\' as [Greeting], \'Wor" +
                    "ld\' as [Subject]\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Trace queries")]
        [Xunit.TraitAttribute("Description", "Trace events are called on fetch")]
        public virtual void TraceEventsAreCalledOnFetch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trace events are called on fetch", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
  testRunner.Given("a database");
#line 14
  testRunner.When("I fetch the query \"SELECT \'Hello\' as [Greeting], \'World\' as [Subject]\"");
#line 15
  testRunner.Then("I should get a BeginQuery event with the value \"SELECT \'Hello\' as [Greeting], \'Wo" +
                    "rld\' as [Subject]\"");
#line 16
  testRunner.And("I should get an EndQuery event with the value \"SELECT \'Hello\' as [Greeting], \'Wor" +
                    "ld\' as [Subject]\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Trace queries")]
        [Xunit.TraitAttribute("Description", "Trace events are called on scalar")]
        public virtual void TraceEventsAreCalledOnScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trace events are called on scalar", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
  testRunner.Given("a database");
#line 20
  testRunner.When("I execute the scalar \"SELECT 1 as [Id]\"");
#line 21
  testRunner.Then("I should get a BeginQuery event with the value \"SELECT 1 as [Id]\"");
#line 22
  testRunner.And("I should get an EndQuery event with the value \"SELECT 1 as [Id]\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Trace queries")]
        [Xunit.TraitAttribute("Description", "Trace events are called on execute")]
        public virtual void TraceEventsAreCalledOnExecute()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trace events are called on execute", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
  testRunner.Given("a database");
#line 26
  testRunner.When("I execute \"SELECT 1 as [Id]\"");
#line 27
  testRunner.Then("I should get a BeginQuery event with the value \"SELECT 1 as [Id]\"");
#line 28
  testRunner.And("I should get an EndQuery event with the value \"SELECT 1 as [Id]\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Trace queries")]
        [Xunit.TraitAttribute("Description", "Trace events are called on multiple execute")]
        public virtual void TraceEventsAreCalledOnMultipleExecute()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Trace events are called on multiple execute", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
  testRunner.Given("a database");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "SELECT 1 as [Id]"});
            table1.AddRow(new string[] {
                        "SELECT 2 as [Id]"});
            table1.AddRow(new string[] {
                        "SELECT 3 as [Id]"});
#line 32
  testRunner.When("I execute", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "SELECT 1 as [Id]"});
            table2.AddRow(new string[] {
                        "SELECT 2 as [Id]"});
            table2.AddRow(new string[] {
                        "SELECT 3 as [Id]"});
#line 36
  testRunner.Then("I should get a BeginQuery event with the values", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "SELECT 1 as [Id]"});
            table3.AddRow(new string[] {
                        "SELECT 2 as [Id]"});
            table3.AddRow(new string[] {
                        "SELECT 3 as [Id]"});
#line 40
  testRunner.And("I should get an EndQuery event with the values", ((string)(null)), table3);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TraceQueriesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TraceQueriesFeature.FeatureTearDown();
            }
        }
    }
}
#endregion
